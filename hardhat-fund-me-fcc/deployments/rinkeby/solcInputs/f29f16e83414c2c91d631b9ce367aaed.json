{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n// need interface to work with\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nimport \"./PriceConverter.sol\";\n\n//Get funds from users\n//Withdraw funds\n// Set a minimum funding value in USD\n\nerror NotOwner();\n\ncontract FundMe {\n    using PriceConverter for uint256;\n\n    uint256 public constant MINIMUM_USD = 5 * 10**18;\n\n    address[] public funders;\n    mapping(address => uint256) public addressToAmountFunded;\n\n    address public immutable i_owner;\n\n    AggregatorV3Interface public priceFeed;\n\n    // Constructor gets called immediately when the contract is deployed\n    constructor(address priceFeedAddress) {\n        i_owner = msg.sender;\n        priceFeed = AggregatorV3Interface(priceFeedAddress); // sets priceFeed to AggregatorV3interface corresponding to priceFeedAdress\n    }\n\n    function fund() public payable {\n        // Want to be able to set a minimum funding value\n        // How do we send ETH to this contract? Contracts can hold tokens\n        require(\n            msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\n            \"Didn't send enough!\"\n        ); //requires the amount to be greater than 1e18 (measured in Wei)\n        funders.push(msg.sender);\n        addressToAmountFunded[msg.sender] += msg.value;\n\n        // What is reverting?\n        // Undoes any action before, and send remaining gas back\n    }\n\n    function withdraw() public onlyOwner {\n        //for loop\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < funders.length;\n            funderIndex++\n        ) {\n            address funder = funders[funderIndex];\n            addressToAmountFunded[funder] = 0;\n        }\n        // reset the array\n        funders = new address[](0);\n\n        //actually withdraw the funds\n\n        //transfer- capped at 2300 gas, automatically reverts if gas is over limit\n        // msg.sender is an address\n        // payable(msg.sender) is a payable address\n        payable(msg.sender).transfer(address(this).balance);\n\n        //send- capped at 2300 gas, doesn't automaticaly revert\n        bool sendSuccess = payable(msg.sender).send(address(this).balance);\n        require(sendSuccess, \"Send failed\");\n\n        //call\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(callSuccess, \"Call Failed\");\n    }\n\n    modifier onlyOwner() {\n        // require(msg.sender == i_owner, \"Sender is not owner!\");\n        if (msg.sender != i_owner) {\n            revert NotOwner();\n        } //uses less gas than require\n        _; //this line runs tells the function to execute the original code of the function\n    }\n\n    // What happens if someone sends this contract ETH without calling the fund function\n\n    // receive()\n\n    receive() external payable {\n        fund();\n    }\n\n    // fallback()\n    fallback() external payable {\n        fund();\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    function getPrice(AggregatorV3Interface priceFeed)\n        internal\n        view\n        returns (uint256)\n    {\n        // ABI\n        // Address 0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\n        (, int256 price, , , ) = priceFeed.latestRoundData();\n        // ETH in terms of USD\n        // 3000.00000000\n        return uint256(price * 10000000000); //Typecasting signed into into a 256 bit unsigned int\n    }\n\n    function getConversionRate(\n        uint256 ethAmount,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        uint256 ethPrice = getPrice(priceFeed);\n        // 3000_000000000000000000 = ETH / USD price\n        // 1_000000000000000000 ETH\n\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\n        return ethAmountInUsd;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}